
   HANA SCALER PACKAGE
   ====================

Robert Michaels, Jefferson Lab, Jan 2003

For documentation, see

http://hallaweb.jlab.org/equipment/daq/THaScaler.html

See also notes in the Makefile.

To use the THaScaler class, you should only need to look at
THaScaler.h (header) to see the public interface.  All the
methods you need should be there.  

---------------------------------------------------------------
The basic steps to obtain scaler data:

   1. Make sure you have the scaler map file in your directory.
      See 'scaler.map' in /hana_scaler_VERSION or at
      http://hallaweb.jlab.org/adaq/scaler.map

   2. Once in the life of the object, you must call the 
      THaScaler::Init() method with appropriate arguments.

         THaScaler scaler;
         scaler.Init("Left");  // Left spectrometer

   3. Each event, you must LoadData.  There are several ways to
      load data:  from a THaEvData object, directly from a CODA
      file, from a scaler history file, from online (directly from
      VME crates). 

         scaler.LoadData(evdata);  // evdata is a THaEvData object

      (Important: Loading from THaEvData only works if its THaCrateMap 
       is initialized correctly, see THaCrateMap::Init().)

   4. Now you may access data via the methods in THaScaler.h
      If you know the slot and channel, simply

         THaScaler scaler;
         data = scaler.GetScaler(slot, chan);       // Counts

                 - or -

         datarate = scaler.GetScalerRate(slot, chan);  // rate, Hz

      The rates are computed using the last two readings, normalized
      to a pulser clock.  
      There are a number of other access methods for detectors,
      beam current monitors, different helicities gated scalers, etc.

   5. In my implementation of THaAnalyzer, I call THaScaler::
      PrintSummary() at the end of analysis.

--> The best way to learn how to use the code is to look at
    the examples:  See the *main*.C codes !!

---------------------------------------------------------------
There are three ways to implement scalers in the root/C++ 
analysis scheme:

   1. Standalone codes that rapidly pick out scaler data and
      do some analysis.  See the *main* routines.  Use the
      flag STANDALONE=1 in Makefile.  

      Test Executibles (compiled if STANDALONE=1)
      All these have "main" routines, e.g. tscalfile_main.C

 tscalfile -- Read a CODA file and print various scaler data.
 tscalasy  -- Read CODA file and crudely compute helicity correl. charge asy
 tscalhist -- Read "End-Run-History" file (generated by DAQ) and print stuff.
 tscalonl -- Read data from VME online and print scaler data.
 xscaler --  xscaler++  Scaler GUI.  
 tscalntup -- Read CODA file (evtype 140), fills an ntuple w/ stuff
 tscaldtime -- Reads CODA file, checks deadtime
 tscalroc11 -- To read the ROC11 scalers (from 'physics' triggers)
 tscalevt -- Analysis of ROC10/11 scalers. 
 tscalring -- Similar to tscalroc11, but more detailed analysis.

   2. You can run the standard analyzer and use the above 
      standalone codes as 'root macros'.  To execute the 
      the scaler codes interactively from root shell, you must
      use root version >= 3.x which has STL support.  

   3. In THaAnalyzer.C  and perhaps some other classes one
      can incorporate the scalers, compiled into the code. 
      I have some examples of this in my version of THaAnalyzer.C


---------------------------------------------------------------
How to run standalone:

    Most scaler analyses will probably be done as an 
    activity seperate from physics event analysis. You
    may therefore want to run simple standalone codes,
    e.g. the codes with the word "main" in their name.

  1. You need the event decoder library.  A "standalone"
     version libdc_local.a is shipped with the scaler 
     package.  It does not rely on any symbols of the 
     main analyzer. However, if this library is not 
     binary compatible with your system see section below 
     on making event decoder library.  

  2. Next compile the hana_scaler software with the line
     "export STANDALONE = 1" uncommented in Makefile.
     You might want to 'make clean' before 'make'.


THaScalerGui:
   For now I leave THaScalerGui out of the SRC list in
   Makefile.  But you may want to put it back in (uncomment
   the appropriate line) for 'xscaler' example, in which case
   you also need to restore the line in haScal_LinkDef.h 

---------------------------------------------------------------
How to make a standalone event decoder library 
You can grab the event decoder from 
http://www.jlab.org/~rom/hana_decode_2.0.tar  (or whatever the version is)
or you can grab it from the analyzer's CVS repository.

    The directory structure of the C++ analyzer is normally

                  
           /analyzer
                    \
                     \
                      /hana_scaler
                     |
                     |
                      /hana_decoder

     i.e. the hana_scaler and hana_decoder are two directories
     under /analyzer.  To make hana_decoder standalone library 
     (which means independent of anything in the analyzer) 
     compile with the line "export STANDALONE = 1" in the Makefile 
     of hana_decoder_VERS.  To compile, 'make clean', then 'make'.
     Then copy it to hana_scaler_VERS with name "libdc_local.a".

          cp libdc.a ../hana_scaler/libdc_local.a

     then you may compile hana_scaler standalone too.  Again, do
     'make clean ; make' in ./hana_scaler.

    

                     



