# Makefile for "hana" (C++ Hall A Analyzer) Scaler Package
# R. Michaels, rom@jlab.org, Aug 2001  See also README !!
# Version of this release
VERS=hana_scaler_1.4
#
# Goes with this version of decoder 
DCDIR=../hana_decode
#
# Test Executibles (compiled if STANDALONE=1)
# tscalfile -- Read a CODA file and print various scaler data.
# tscalasy  -- Read CODA file and crudely compute helicity correl. charge asy
# tscalhist -- Read "End-Run-History" file (generated by DAQ) and print stuff.
# tscalonl -- Read data from VME online and print scaler data.
# xscaler --  xscaler++  Scaler GUI.  
# tscalntup -- Read a CODA file and fills an ntuple with stuff
# tscaldtime -- Reads CODA file, checks deadtime
# tscalroc11 -- To read the ROC11 scalers (from event stream)
# 
# To understand how to use scaler classes, look at the 'main'
# routines  tscalfile_main.C tscalasy_main.C tscalhist_main.C tscalonl_main.C
# etc corresponding to the above executibles. 
# See also documentation at
# http://hallaweb.jlab.org/equipment/daq/THaScaler.html

# If you are using a version of root earlier than 3.x, the STL headers
# cause rootcint to choke, but can run as standalone execs (STANDALONE=1).
# export ROOTPRE3 = 1

# To compile the test execs or not.  If not (default) it just makes library.
# export STANDALONE = 1

# To build a shared library, uncomment the following line
export BUILD_SHARED = 1

# For test executibles, must have the Decoder Library.  I will ship
# a fairly stable version and call it libdc_local.a (a local copy).  
# It's probably good enough.  If not, see README.
LIBDC=libdc_local.a

ARCH          = linuxegcs
#ARCH          = solarisCC5

ROOTCFLAGS   := $(shell root-config --cflags)
ROOTLIBS     := $(shell root-config --libs)
ROOTGLIBS    := $(shell root-config --glibs)

INCLUDES      = $(ROOTCFLAGS) -I$(DCDIR)

ifeq ($(ARCH),solarisCC5)
# Solaris CC 5.0
CXX           = CC
CXXFLAGS      = -O -KPIC
LD            = CC
LDFLAGS       = -O
SOFLAGS       = -G
endif

ifeq ($(ARCH),linuxegcs)
# Linux with egcs (>= RedHat 5.2)
CXX           = g++
CXXFLAGS      = -O -Wall -Woverloaded-virtual -fPIC
LD            = g++
LDFLAGS       = -O
SOFLAGS       = -shared
endif

ifeq ($(CXX),)
$(error $(ARCH) invalid architecture)
endif

MAKEDEPEND    = g++

ifdef WITH_DEBUG
CXXFLAGS     += -DWITH_DEBUG
endif

export OSNAME := $(shell uname)

ifeq ($(OSNAME),SunOS)

   CXXFLAGS     += -DSUNVERS
#   GLIB = -lc -lgen -lw
   GLIB = 
   SLIB = -L/opt/SUNWspro/SC4.2/lib -lsunmath
# all this needed for ET...  up to comment below
   ET_AC_FLAGS = -D_REENTRANT -D_POSIX_THREAD_SEMANTICS
   ET_CFLAGS = -mt -fast -xO5 -KPIC $(ET_AC_FLAGS) -DSUNVERS
   CODA = /adaqfs/coda/2.2
   LIBET = $(CODA)/SunOS/lib/libet.so
   ONLIBS = $(LIBET) -lposix4 -lnsl -lsocket -lresolv
#   ALL_LIBS =  $(ROOTGLIBS) $(LIBDC) $(GLIB)
   ALL_LIBS =  $(ROOTGLIBS) $(LIBDC)

endif

# Note, HP-UX not officially supported.
ifeq ($(OSNAME),HP-UX)

   CXX           = g++
   CXXFLAGS      =  -O -DHPVERS -I$(DCDIR)
   LD            = g++
   LDFLAGS       = -g -D
   SOFLAGS       = -G
   GLIB          = -lm -lc  
   ALL_LIBS      = $(GLIB) $(LIBDC) 

endif

ifeq ($(OSNAME),Linux)

   CXXFLAGS     += -DLINUXVERS

   LIBS          = 
   GLIBS         = -L/usr/X11R6/lib -lXpm -lX11
   ALL_LIBS      = $(ROOTGLIBS) $(LIBDC) 
#   ALL_LIBS      = $(GLIBS) $(ROOTLIBS) $(ROOTGLIBS) $(LIBDC) 

endif

CXXFLAGS     += $(INCLUDES)
LIBS         += $(ROOTLIBS) $(SYSLIBS)
GLIBS        += $(ROOTGLIBS) $(SYSLIBS)

#----------------------------------------------------------------------------
# The following sources comprise the package of scaler classes by R. Michaels.
#SRC = THaScaler.C THaNormScaler.C THaScalerBank.C THaScalerDB.C THaScalerGui.C
SRC = THaScaler.C THaNormScaler.C THaScalerBank.C THaScalerDB.C

HEAD = $(SRC:.C=.h)
DEPS = $(SRC:.C=.d)
SCALER_OBJS = $(SRC:.C=.o)

ifdef ROOTPRE3
CXXFLAGS += -DROOTPRE3
else
SCALER_OBJS += THaScalDict.o
endif

# Test code executibles
PROGS = tscalfile tscalasy tscalhist tscalonl xscaler tscalntup tscaldtime tscalroc11

# To compile the local test codes:
# Set STANDALONE at top of makefile.  But comment it out if 
# to compile only the library libscaler.a for use with the main analyzer.

ifdef STANDALONE
CXXFLAGS += -DSTANDALONE
  all: $(PROGS) ../libscaler.a
else
 ifdef BUILD_SHARED
   all:  ../libscaler.so
 else
   all:  ../libscaler.a
 endif
endif

# Library for main analyzer

../libscaler.a:	$(SCALER_OBJS) 
	rm -f $@
	ar crs $@ $^

../libscaler.so:	$(SCALER_OBJS) 
	rm -f $@
	$(LD) $(LDFLAGS) $(SOFLAGS) -o $@ $^

tscalfile: tscalfile_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalfile_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalasy: tscalasy_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalasy_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

tscalhist: tscalhist_main.o  $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalhist_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

tscalonl: tscalonl_main.o  $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalonl_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

xscaler: tscalgui_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalgui_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalntup: tscalntup_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalntup_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscaldtime: tscaldtime_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC) 
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscaldtime_main.o $(SCALER_OBJS) $(ALL_LIBS)

tscalroc11: tscalroc11_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalroc11_main.o $(SCALER_OBJS) $(ALL_LIBS) 



# Dictionary
THaScalDict.C: $(HEAD) haScal_LinkDef.h
	@echo "Generating Scaler Package Dictionary..."
	$(ROOTSYS)/bin/rootcint -f THaScalDict.C -c $(INCLUDES) $(HEAD) \
		haScal_LinkDef.h

tarfile: clean version
	tar cvf $(VERS).tar ./hana_scaler

version:
	mkdir $(VERS) 
	cp *.C ./$(VERS) 
	cp *.h ./$(VERS) 
	cp scaler.map ./$(VERS)
	cp libdc_local.a ./$(VERS)
	cp Makefile ./$(VERS) 
	cp README ./$(VERS)
	tar cvf $(VERS).tar ./$(VERS)
         
clean:
	rm -f *.o core *~ THaScalDict* *.out *.tar $(PROGS)

realclean:  clean
	rm -f *.d

###

.SUFFIXES:
.SUFFIXES: .c .cc .cpp .C .o .d

%.o:	%.C
	$(CXX) $(CXXFLAGS) -c $<

%.d:	%.C
	@echo Creating dependencies for $<
#	@$(SHELL) -ec '$(CXX) -MM $(CXXFLAGS) -c $< \
#		| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
#		[ -s $@ ] || rm -f $@'
	@$(SHELL) -ec '$(MAKEDEPEND) -MM $(INCLUDES) -c $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

-include $(DEPS)
