Hall A C++ Analyzer version 0.65
--------------------------------

01 April 2002

Disclaimer
~~~~~~~~~~
This is BETA software. Use at your own risk. The program structure is
still somewhat in flux and subject to changes that might make new code
incompatible with previous versions.  Little effort has been made so
far to make things foolproof.

What's new
~~~~~~~~~~

- A new set of VDC classes that incorporate drift-time fitting and
  multitrack analysis, and generate high-precision tracking information. 
  This VDC code produces results similar, but not identical to
  ESPACE. Some differences are due to the different time-to-distance
  conversion algorithm used. This will be studied in detail in the
  next few weeks. 

  Some of the coding for these classes was done in the summer of 2001 
  by Hall A ERULF summer student Jonathan Robbins.

- An extension to the global variable system that allow definitions of
  variables using ROOT RTTI information.  This has several major
  advantages over the previous way to define variables. In particular,
  the data type of variables and the dimension of arrays is determined 
  automatically, and it is possible to define variables on data stored in
  object arrays (derived from TSeqCollection, e.g. TList, TClonesArray)
  and on certain object member functions (e.g. GetSize()). 
  Some limitations apply; see the documentation on the Web for details.

- (R. Michaels) A new multipurpose apparatus called THaDecData that contains
  miscellaneous decoder data and can be used for quick testing of arbitrary
  signals connected to the DAQ hardware.

Notes
~~~~~

- The VDC class is now able produce multiple tracks per event (THaTrack) 
  in the tracks TClonesArray. These tracks always occupy indices 0 through
  tracks->GetLast(). The number of tracks is tracks->GetLast()+1, which
  is available as global variables "R.tr.n" and "L.tr.n".

- Detector classes have not yet been updated to analyze all tracks
  given to them. Many detectors calculate the position where a track
  crosses the detector plane. This information is still calculated,
  but now usually refers to the first of possibly several tracks.

- The multitrack VDC analysis has not been debugged thoroughly and
  has a number of known weaknesses. Do not expect particularly reliable
  results for multitrack events yet. Improving multitrack analysis is
  one of the priorities for the next release.

- There is no target reconstruction yet. This is another priority for the
  next release.
  

System requirements
~~~~~~~~~~~~~~~~~~~

IMPORTANT: This release requires ROOT 3.00 or higher! 

These sources have been tested on the following platforms:

   - RedHat Linux 6.2 with egcs-1.1.2 and ROOT 3.00-06 (ifarml)
     and ROOT 3.02-00
   - RedHat Linux 7.1 with g++-2.96 and ROOT 3.01-05
   - Sun Solaris 2.6/SPARC with Sun's CC5 compiler and ROOT 3.01-03 (ifarms)

Note: On Solaris, one still needs gcc to be installed, even though the
analyzer is compiled with Sun's CC5.  The reason is that the Makefiles
use gcc to create the include file dependency lists.  A standalone
"makedepend" script will be included in a future release so that gcc
is no longer required on all platforms.

The analyzer requires about 20-50MB of free virtual memory (= physical
RAM + swap space), possibly more on Solaris, depending on which
classes you instantiate, how large the output tree grows, etc. These
requirements are typical of ROOT applications.

Currently, several classes contain direct Unix system calls, making porting
to non-Unix platforms not trivial. This restriction will be lifted in
a future release.


Building and installing
~~~~~~~~~~~~~~~~~~~~~~~
The distribution is by default configured for Linux. To change to
the Solaris/CC5 environment, please make the following change at the
beginning of the Makefiles:

#ARCH = linuxegcs
ARCH = solarisCC5

This affects the following three Makefiles:

Makefile
hana_decode/Makefile
hana_scaler/Makefile

A "configure" script to automate the platform detection will be included in
a future release.

Before compiling, make sure that your have set ROOTSYS correctly
and $ROOTSYS/bin is in your PATH.

On the ifarm machines, issue the command
	use root/3.01-06
or
        use root/3.02-07
to configure ROOT and set the PATH.

To compile, run the Makefile with GNU make (tested with make 3.78-1).
Usually, you just need to type "make". On Sun (ifarms), type "gmake".

Before running, set your LD_LIBRARY_PATH as follows:

  export LD_LIBRARY_PATH=.:$ROOTSYS/lib:$LD_LIBRARY_PATH
OR
  setenv LD_LIBRARY_PATH .:$ROOTSYS/lib:$LD_LIBRARY_PATH

(i.e. make sure the current directory is in the LD_LIBRARY_PATH).

Alternatively, you can copy the three shared libraries,
	libHallA.so, libdc.so, libscaler.so
to a directory of your choice (e.g. /usr/local/lib). Depending on your
choice, you may or may not have to modify LD_LIBRARY_PATH (e.g. /usr/local/lib
is usually included in the default shared library search path).

Run the analyzer as follows:

	./analyzer

Usage
~~~~~
Here is an example session that analyzes 10000 events of a run file
and writes a ROOT tree with values of the L- and R-arm HRS detector raw data.
Then a few sample plots are created.

Before running this session, get a CODA run file and put it
in the current directory as "run.dat".  You can download a sample
from the same location where you got this distribution.

(make a link called run.dat to the data file you want to analyze)
analyzer[1] .x setup.C                                // Setup analysis parameters
analyzer[2] analyzer->Process( *run )                 // Process the run defined in setup.C
analyzer[3] gDirectory->ls()                          // Show objects in current file
analyzer[4] evlen->Draw()                             // Plot histogram evlen
analyzer[5] T->Print()                                // Show variables in tree
analyzer[6] T->Draw("fL_S1L_adc[3]:fL_S1R_adc[3]")    // Plot S1 ADC 3 left vs. right
analyzer[7] T->Draw("fL_S1L_adc[3]:fEvtHdr.fEvtNum")  // Plot S1 ADC 3 left vs. event number
analyzer[8] analyzer->Close()                         // Close output file
analyzer[9] .q                                        // Quit interactive session

You can now work with the output file "Afile.root" with standard ROOT
or the analyzer.

Example Scripts
~~~~~~~~~~~~~~~
A number of example scripts are included with this release. They are:

setup.C            - generic analysis macro
setup_demo.C       - setup script for the demo* macros
demo_s1.C          - plot script for R- and L-arm S1 scintillators
demo_s2.C          - plot script for R- and L-arm S2 scintillators
demo_aerogel.C     - plot script for R-arm aerogel raw data
demo_cherenkov.C   - plot script for R-arm gas Cherenkov raw data
demo_shower.C      - plot script for R-arm total shower detector
demo_track.C       - plot script for R-arm tracking data
demo_VDC.[Ch]      - example class for VDC analysis

The demo scripts were originally written by Armen Ketikyan.
To use them (except demo_VDC), please do the following:

(make a link called demo.dat to the data file you want to analyze)
analyzer[0] .x setup_demo.C
analyzer[1] analyzer->Process(*run)
analyzer[2] .x demo_xxxx.C           // xxxx = s1,s2,aerogel,cherenkov,shower,track

To use the demo_VDC script:

analyzer[0] .L demo_VDC.C
analyzer[1] demo_VDC t       // Instantiate a demo_VDC object. Opens Afile.root.
analyzer[2] t.Loop()         // Loop over all events in the file, then plot results


Documentation
~~~~~~~~~~~~~
Further documentation is available at the project home page:

	http://hallaweb.jlab.org/root/


